{"algo": "permute"}

// specifically to test expression syntax edge cases

$v <> $v

CAST EXPR

die($v,)
die($v, $v)
exit()
exit(EXPR)
exit($v,)
exit($v, $v)

empty()
empty(EXPR)
empty($v,)
empty($v, $v)

eval()
eval(EXPR)
eval($v,)
eval($v, $v)

isset()
isset(EXPR)
isset($v,)
isset($v, $v)

[]
[$v]
[$v,]
[$v, $v]
[EXPR => $v]
[...$v]
[$v, ...$v]
[...$v, $v]
[...$v] = $v
[...]
[&$v]
[$v => &$v]
[...&$v]
array()
array($v)
array($v,)
array($v, $v)
array(EXPR => $v)
array(...$v)
array($v, ...$v)
array(...$v, $v)
array(...$v) = $v
array(...)
array(&$v)
array($v => &$v)
array(...&$v)

fn () => null
static fn () => null
fn & () => null
fn (EXPR_SYNTAX_PARAM) => null
fn (EXPR_SYNTAX_PARAM, EXPR_SYNTAX_PARAM) => null
fn (): TYPE => null
fn () => {}

function () {}
static function () {}
function & () {}
function (EXPR_SYNTAX_PARAM) {}
function (EXPR_SYNTAX_PARAM, EXPR_SYNTAX_PARAM) {}
function () use () {}
function () use ($v) {}
function () use (&$v) {}
function () use ($v, $v) {}
function () use ($v,) {}
function (): TYPE {}

EXPR_SYNTAX_NUM_PREFIX{*empty*}EXPR_SYNTAX_NUM_PART
EXPR_SYNTAX_NUM_PREFIX{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART
EXPR_SYNTAX_NUM_PREFIX{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART
EXPR_SYNTAX_NUM_PREFIX{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART
EXPR_SYNTAX_NUM_PREFIX{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART{*empty*}EXPR_SYNTAX_NUM_PART

// integer overflow
// TODO 9431597651654654687651616546512616546546218794564645434
